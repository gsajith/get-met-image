import Head from "next/head";
import React, { useEffect, useState } from "react";
import ArtistName from "../components/ArtistName";
import CardContainer from "../components/CardContainer";
import CardContent from "../components/CardContent";
import ColorSwatch from "../components/ColorSwatch";
import ImageContainer from "../components/ImageContainer";
import ImageName from "../components/ImageName";
import Page from "../components/Page";
import PageContainer from "../components/PageContainer";
import CopiedNotification from "../components/CopiedNotification";
import CopyButton from "../components/CopyButton";
import LazyImage from "./LazyImage";
import LoadingPage from "./LoadingPage";
import PageWrapper from "../components/PageWrapper";
import axios from "axios";
import LoadingSwatch from "./LoadingSwatch";
import { isMobile } from "react-device-detect";
import dynamic from "next/dynamic";

const NoSSRCanvas = dynamic(() => import("./Canvas"), { ssr: false });

const ImageCardPage = ({
  data,
  loading,
  setUrlDataResult,
  canvasRef,
  extractedColors,
  setExtractedColors,
}) => {
  const [smallImageUrl, setSmallImageUrl] = useState(data.primaryImageSmall);
  const [imageTitle, setImageTitle] = useState(data.title);
  const [artist, setArtist] = useState(data.artistDisplayName);
  const [date, setDate] = useState(data.objectDate);
  const [objectID, setObjectID] = useState(data.objectID);
  const [hovering, setHovering] = useState(false);
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    if (data && typeof data !== "undefined") {
      setSmallImageUrl(data.primaryImageSmall);
      setImageTitle(data.title);
      setArtist(data.artistDisplayName);
      setDate(data.objectDate);
      setObjectID(data.objectID);

      if (
        data.primaryImage &&
        typeof data.primaryImage !== "undefined" &&
        data.primaryImage.length > 0
      ) {
        axios
          .get("/api/getImageColors?url=" + data.primaryImage)
          .then((result) => {
            setExtractedColors(result.data);
          });
      }
    }
  }, [data]);

  useEffect(() => {
    if (isMobile) {
      // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/
      // First we get the viewport height and we multiple it by 1% to get a value for a vh unit
      let vh = window.innerHeight * 0.01;
      // Then we set the value in the --vh custom property to the root of the document
      document.documentElement.style.setProperty("--vh", `${vh}px`);
    }
  }, [isMobile]);

  return (
    <>
      <Page>
        <PageWrapper color={extractedColors?.lightVibrant}>
          <PageContainer>
            <Head>
              <title>
                {imageTitle
                  ? imageTitle
                  : "Get a random Metropolitan Museum image!"}
              </title>
              <meta
                name="description"
                content={
                  artist
                    ? artist + " - generated by get-met-image"
                    : "Get a random image from the Metropolitan Museum of Art"
                }
              />
              <meta
                name="viewport"
                content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
              />
              <link rel="icon" href="/favicon.ico" />
            </Head>

            <CardContainer
              onMouseEnter={() => setHovering(!loading && true)}
              onMouseLeave={() => setHovering(false)}>
              <CardContent>
                <LoadingPage
                  color={extractedColors?.lightVibrant}
                  opacity={loading ? 0.7 : 0}
                />
                <CopiedNotification opacity={copied ? 0.8 : 0}>
                  Copied link
                </CopiedNotification>
                {(hovering || isMobile) && (
                  <CopyButton
                    tabindex="1"
                    isMobile={isMobile}
                    objectID={objectID}
                    setCopied={setCopied}
                  />
                )}
                <ImageContainer>
                  <LazyImage
                    src={smallImageUrl}
                    setUrlDataResult={setUrlDataResult}
                  />
                </ImageContainer>
                <ImageName color={extractedColors?.vibrant}>
                  {imageTitle ? imageTitle : "Title unknown"}
                  {date ? <>, {date}</> : ", date unknown"}
                </ImageName>
                <ArtistName color={extractedColors?.darkMuted}>
                  {artist ? artist : "Artist unknown"}
                </ArtistName>
                <div
                  style={{
                    position: "absolute",
                    bottom: 16,
                    right: 16,
                    display: "flex",
                    flexDirection: "row",
                  }}>
                  {!extractedColors && <LoadingSwatch />}
                  {extractedColors && (
                    <>
                      {Object.values(extractedColors).map((color, index) => (
                        <ColorSwatch
                          key={"swatch" + index}
                          style={{ backgroundColor: color }}
                        />
                      ))}
                    </>
                  )}
                </div>
              </CardContent>
            </CardContainer>
          </PageContainer>
        </PageWrapper>
      </Page>
      {!isMobile && <NoSSRCanvas canvasRef={canvasRef} />}
    </>
  );
};

export default ImageCardPage;
