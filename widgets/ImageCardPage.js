import Head from "next/head";
import React, { useEffect, useState } from "react";
import ArtistName from "../components/ArtistName";
import CardContainer from "../components/CardContainer";
import CardContent from "../components/CardContent";
import ColorSwatch from "../components/ColorSwatch";
import ImageContainer from "../components/ImageContainer";
import ImageName from "../components/ImageName";
import Page from "../components/Page";
import PageContainer from "../components/PageContainer";
import CopiedNotification from "../components/CopiedNotification";
import CopyButton from "../components/CopyButton";
import LazyImage from "./LazyImage";
import LoadingPage from "./LoadingPage";
import PageWrapper from "../components/PageWrapper";
import axios from "axios";
import LoadingSwatch from "./LoadingSwatch";

const ImageCardPage = ({ data, loading, setUrlDataResult }) => {
  const [smallImageUrl, setSmallImageUrl] = useState(data.primaryImageSmall);
  const [imageTitle, setImageTitle] = useState(data.title);
  const [artist, setArtist] = useState(data.artistDisplayName);
  const [date, setDate] = useState(data.objectDate);
  const [extractedColors, setExtractedColors] = useState(data.extractedColors);
  const [objectID, setObjectID] = useState(data.objectID);
  const [hovering, setHovering] = useState(false);
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    if (data && typeof data !== "undefined") {
      setSmallImageUrl(data.primaryImageSmall);
      setImageTitle(data.title);
      setArtist(data.artistDisplayName);
      setDate(data.objectDate);
      setExtractedColors(data.extractedColors);
      setObjectID(data.objectID);

      if (
        data.primaryImage &&
        typeof data.primaryImage !== "undefined" &&
        data.primaryImage.length > 0
      ) {
        axios
          .get("/api/getImageColors?url=" + data.primaryImage)
          .then((result) => {
            setExtractedColors(result.data);
          });
      }
    }
  }, [data]);

  return (
    <Page>
      <PageWrapper color={extractedColors?.lightVibrant}>
        <PageContainer>
          <Head>
            <title>
              {imageTitle
                ? imageTitle
                : "Get a random Metropolitan Museum image!"}
            </title>
            <meta
              name="description"
              content={
                artist
                  ? artist + " - generated by get-met-image"
                  : "Get a random image from the Metropolitan Museum of Art"
              }
            />
            <meta
              name="viewport"
              content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
            />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <CardContainer
            onMouseEnter={() => setHovering(!loading && true)}
            onMouseLeave={() => setHovering(false)}>
            <CardContent>
              <LoadingPage
                color={extractedColors?.lightVibrant}
                opacity={loading ? 0.7 : 0}
              />
              <CopiedNotification opacity={copied ? 1 : 0}>
                copied
              </CopiedNotification>
              {hovering && (
                <CopyButton objectID={objectID} setCopied={setCopied} />
              )}
              <ImageContainer>
                <LazyImage
                  src={smallImageUrl}
                  setUrlDataResult={setUrlDataResult}
                />
              </ImageContainer>
              <ImageName color={extractedColors?.vibrant}>
                {imageTitle ? imageTitle : "Title unknown"}
                {date ? <>, {date}</> : ", date unknown"}
              </ImageName>
              <ArtistName color={extractedColors?.darkMuted}>
                {artist ? artist : "Artist unknown"}
              </ArtistName>
              <div
                style={{
                  position: "absolute",
                  bottom: 16,
                  right: 16,
                  display: "flex",
                  flexDirection: "row",
                }}>
                {!extractedColors && <LoadingSwatch />}
                {extractedColors && (
                  <>
                    {Object.values(extractedColors).map((color, index) => (
                      <ColorSwatch
                        key={"swatch" + index}
                        style={{ backgroundColor: color }}
                      />
                    ))}
                  </>
                )}
              </div>
            </CardContent>
          </CardContainer>
        </PageContainer>
      </PageWrapper>
    </Page>
  );
};

export default ImageCardPage;
